@startuml
title "C4. Контейнеры системы обмена валют с разделением баз данных"

!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!$ICONURL = "https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/v3.0.0/icons"
!include $ICONURL/common.puml
!include $ICONURL/devicons/react.puml
!include $ICONURL/devicons2/postgresql.puml

' Персоны
Person(trader, "Трейдер", "Запрос на обмен валюты и проверка курсов")
Person(admin, "Администратор", "Управление учетными записями пользователей и настройка системы")

' Система
System_Boundary(appBoundary, "Система обмена валют") {
    Container(currencyExchangeService, "Сервис обмена валют", "Java", "Обработка запросов на обмен валюты с использованием микросервисной архитектуры")
    Container(webApp, "Веб-приложение", "React", "Интерфейс для пользователей для обмена валют и проверки курсов")
    Container(apiIntegration, "API интеграции с платежными системами", "REST API", "Интеграция с платежными системами для многоканальной обработки платежей")
    Container(exchangeRateService, "Сервис курсов валют", "Java", "Интеграция с API Центробанка для получения актуальных курсов валют")
    Container(userAccountService, "Сервис пользователей и аккаунтов", "Java", "Управление учетными записями пользователей и их аккаунтами")
    Container(accountService, "Сервис работы со счетами", "Java", "Управление счетами пользователей")
    Container(transactionService, "Сервис транзакций", "Java", "Обработка финансовых транзакций")
    Container(eventBus, "Событийная шина", "RabbitMQ", "Обработка и маршрутизация событий между компонентами системы")
    
    ContainerDb(db_users, "db users sheme", "PostgreSQL", "Хранение данных о пользователях")
    ContainerDb(db_accounts, "db accounts sheme", "PostgreSQL", "Хранение данных о счетах пользователей")
    ContainerDb(db_transactions, "db transactions sheme", "PostgreSQL", "Хранение данных о транзакциях")
    ContainerDb(db_exchange_rate, "db exchange rate sheme", "PostgreSQL", "Хранение данных о курсах валют")
    ContainerDb(db_currency_exchange, "db currency exchange sheme", "PostgreSQL", "Хранение данных о курсах валют")
}

' Внешние системы
System_Ext(financialAPI, "API финансовых рынков", "Получение актуальных курсов валют")
System_Ext(paymentAPI, "Платежная система", "Интеграция с платежными системами")
System_Ext(notificationServiceExt, "Сервис уведомлений", "Отправка уведомлений пользователям")

' Расположение элементов
trader --> webApp : "Использует\n[HTTP/TCP]"
trader --> paymentAPI : "Использует\n[HTTP/TCP]"
admin --> webApp : "Использует\n[HTTP/TCP]"

webApp --> userAccountService : "API вызовы\n[HTTPS/REST]"
webApp --> currencyExchangeService : "API вызовы\n[HTTPS/REST]"
webApp --> transactionService : "API вызовы\n[HTTPS/REST]"
webApp --> exchangeRateService : "API вызовы\n[HTTPS/REST]"
webApp --> accountService : "API вызовы\n[HTTPS/REST]"

userAccountService --> db_users : "Чтение/запись\n[SQL]"
accountService --> db_accounts : "Чтение/запись\n[SQL]"
transactionService --> db_transactions : "Чтение/запись\n[SQL]"
currencyExchangeService --> db_currency_exchange : "Чтение\n[SQL]"
exchangeRateService --> db_exchange_rate : "Чтение/запись\n[SQL]"

transactionService --> apiIntegration : "Запросы на обработку платежей\n[HTTPS/REST]"
apiIntegration ---> paymentAPI : "Интеграция с платежными системами\n[HTTPS/REST]"
exchangeRateService ----> financialAPI : "Запрос актуальных курсов\n[HTTPS/REST]"

' Связь с событийной шиной
userAccountService --> eventBus : "Публикация событий: Пользователь зарегистрирован, данные изменены"
accountService --> eventBus : "Публикация события: Счет создан, удален"
transactionService --> eventBus : "Публикация событий транзакций"
currencyExchangeService --> eventBus : "Публикация события: Обмен валюты"
exchangeRateService --> eventBus : "Публикация события: Курсы валют обновлены"

' Реакция на события
eventBus ---> notificationServiceExt : "Отправка уведомления"

@enduml
