@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

title "C4. Инфроструктура системы электронного обучения"

package "Яндекс Облако" as cloud {
    Container(nginx, "Yandex Network Load Balancer", "", "Обратный прокси и балансировщик нагрузки")

    package "Yandex Managed Service for Kubernetes" as k8s_cluster {
        package "Auth Pod" as auth_pod {
            Container(auth_service, "Auth Service", "Go", "Сервис аутентификации и авторизации")
        }

        package "User Management Pod" as user_pod {
            Container(user_service, "User Management Service", "Go", "Управление профилями пользователей")
        }

        package "Course Management Pod" as course_pod {
            Container(course_service, "Course Management Service", "Go", "Создание и редактирование курсов")
        }

        package "Content Delivery Pod" as content_pod {
            Container(content_service, "Content Delivery Service", "Go", "Доставка и потоковое вещание материалов курса")
        }

        package "Testing Pod" as testing_pod {
            Container(testing_service, "Testing Service", "Go", "Проведение тестов и квизов")
        }

        package "Certificate Pod" as certificate_pod {
            Container(certificate_service, "Certificate Service", "Go", "Генерация и выдача сертификатов")
        }

        package "Notification Pod" as notification_pod {
            Container(notification_service, "Notification Service", "Go", "Уведомления пользователей")
        }

        package "Forum Pod" as forum_pod {
            Container(forum_service, "Forum Service", "Go", "Форумы и комментарии к курсам")
        }

        package "Statistics Pod" as analytics_pod {
            Container(statistics_service, "Analytics Service", "Go", "Статистика и аналитика")
        }

        package "Messaging Pod" as messaging_pod {
            Container(messaging_service, "Messaging Service", "Go", "Чат и обмен сообщениями")
        }

        package "Admin Pod" as admin_pod {
            Container(admin_service, "Admin Service", "Go", "Администрирование системы")
        }

        package "Support Pod" as support_pod {
            Container(support_service, "Support Service", "Go", "Техническая поддержка")
        }

        package "Search Pod" as search_pod {
            Container(search_service, "Search Service", "Go", "Поиск и каталогизация курсов")
        }
    }

    Container(kafka, "Yandex Managed Service for Apache Kafka", "Apache Kafka", "Асинхронная связь между сервисами")

    package "Yandex Managed Service for PostgreSQL" as databases {
    ContainerDb(user_db, "User Database", "PostgreSQL", "Хранение информации о пользователях")
    ContainerDb(course_db, "Course Content Database", "PostgreSQL", "Хранение материалов и метаданных курсов")
    ContainerDb(statistics_db, "Statistics Database", "PostgreSQL", "Хранение данных аналитики и статистики")
    ContainerDb(notification_db, "Notification Database", "PostgreSQL", "Хранение данных уведомлений")
    ContainerDb(forum_db, "Forum Database", "PostgreSQL", "Хранение сообщений форумов и комментариев")
    ContainerDb(cert_db, "Certificate Database", "PostgreSQL", "Хранение данных сертификатов")
    }
}

System_Ext(email_service, "Email Service", "Сервис доставки электронной почты")
System_Ext(push_service, "Push Notification Service", "Сервис отправки Push-уведомлений")
System_Ext(media_storage, "Хранилище медиа", "Облачное хранилище (AWS S3)")
System_Ext(search_engine, "Search Engine", "Elasticsearch", "Поисковый движок для полнотекстового поиска")

' Соединения между сервисами и базами данных
Rel(auth_service, user_db, "Чтение/Запись", "Go Database Driver")
Rel(user_service, user_db, "Чтение/Запись", "Go Database Driver")
Rel(course_service, course_db, "Чтение/Запись", "Go Database Driver")
Rel(content_service, course_db, "Чтение материалов", "Go Database Driver")
Rel(testing_service, course_db, "Чтение тестов", "Go Database Driver")
Rel(testing_service, user_db, "Запись результатов", "Go Database Driver")
Rel(certificate_service, cert_db, "Чтение/Запись", "Go Database Driver")
Rel(notification_service, notification_db, "Чтение/Запись", "Go Database Driver")
Rel(forum_service, forum_db, "Чтение/Запись", "Go Database Driver")
Rel(statistics_service, statistics_db, "Чтение/Запись", "Go Database Driver")
Rel(messaging_service, user_db, "Чтение профилей", "Go Database Driver")
Rel(admin_service, user_db, "Администрирование", "Go Database Driver")
Rel(admin_service, course_db, "Администрирование", "Go Database Driver")
Rel(admin_service, cert_db, "Администрирование", "Go Database Driver")
Rel(support_service, user_db, "Чтение/Запись", "Go Database Driver")
Rel(search_service, course_db, "Индексирование данных", "REST API")
Rel(search_service, forum_db, "Индексирование данных", "REST API")

' Асинхронная связь между сервисами через Kafka
Rel(k8s_cluster, kafka, "Публикация/Подписка на события", "Kafka API")

' Взаимодействие с внешними системами
Rel(notification_service, email_service, "Отправка Email", "SMTP/REST API")
Rel(notification_service, push_service, "Отправка Push-уведомлений", "REST API")
Rel(content_service, media_storage, "Загрузка/Скачивание контента", "REST API")
Rel(search_service, search_engine, "Индексирование/Поиск данных", "REST API")

' Соединение Nginx с Kubernetes кластером
Rel(nginx, k8s_cluster, "Проксирование запросов", "HTTP/HTTPS")

' Скрытые соединения для поддержания структуры диаграммы
k8s_cluster ---[hidden]---> databases

@enduml